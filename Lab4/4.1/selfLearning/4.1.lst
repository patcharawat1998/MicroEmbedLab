CCS PCM C Compiler, Version 5.074, 32906               14-Feb-18 00:30

               Filename:   K:\Github\MicroEmbedLab\Lab4\4.1\selfLearning\4.1.lst

               ROM used:   119 words (1%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           13 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   045
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... #define RUN_BUTTON   PIN_B7 
....................  
.................... int counter=0; 
....................  
....................  
.................... #INT_TIMER1 
.................... void timer1_isr() { 
....................    set_timer1(3036); // re-set the timer1 counter to maintain a stable period 
0031:  CLRF   0E
0032:  MOVLW  0B
0033:  MOVWF  0F
0034:  MOVLW  DC
0035:  MOVWF  0E
....................    counter++; 
0036:  INCF   27,F
....................    if(counter>=20){ 
0037:  MOVF   27,W
0038:  SUBLW  13
0039:  BTFSC  03.0
003A:  GOTO   041
....................      output_toggle(PIN_B5); 
003B:  BSF    03.5
003C:  BCF    06.5
003D:  MOVLW  20
003E:  BCF    03.5
003F:  XORWF  06,F
....................      counter=0; 
0040:  CLRF   27
....................    } 
....................     
0041:  BCF    0C.0
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   01D
.................... } 
....................  
.................... void main() 
0045:  MOVF   03,W
0046:  ANDLW  1F
0047:  MOVWF  03
0048:  MOVLW  71
0049:  BSF    03.5
004A:  MOVWF  0F
004B:  CLRF   10
004C:  MOVF   0F,W
004D:  BSF    03.6
004E:  BCF    07.3
004F:  MOVLW  0C
0050:  BCF    03.6
0051:  MOVWF  19
0052:  MOVLW  A2
0053:  MOVWF  18
0054:  MOVLW  90
0055:  BCF    03.5
0056:  MOVWF  18
0057:  CLRF   27
0058:  BSF    03.5
0059:  BSF    03.6
005A:  MOVF   09,W
005B:  ANDLW  C0
005C:  MOVWF  09
005D:  BCF    03.6
005E:  BCF    1F.4
005F:  BCF    1F.5
0060:  MOVLW  00
0061:  BSF    03.6
0062:  MOVWF  08
0063:  BCF    03.5
0064:  CLRF   07
0065:  CLRF   08
0066:  CLRF   09
0067:  BCF    03.7
.................... { 
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
0068:  MOVLW  35
0069:  BCF    03.6
006A:  MOVWF  10
....................    set_timer1(3036); 
006B:  CLRF   0E
006C:  MOVLW  0B
006D:  MOVWF  0F
006E:  MOVLW  DC
006F:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1); 
0070:  BSF    03.5
0071:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0072:  MOVLW  C0
0073:  BCF    03.5
0074:  IORWF  0B,F
....................     
....................    while(1){ 
0075:  GOTO   075
....................     
....................    } 
.................... } 
....................  
0076:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
