CCS PCM C Compiler, Version 5.074, 32906               07-Feb-18 14:27

               Filename:   C:\Users\DONUT\Desktop\2_2560_Work\EMbedLab\Lab4\4.2\4.2.2test.lst

               ROM used:   161 words (2%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           14 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   059
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
0045:  MOVLW  28
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   058
004B:  MOVLW  02
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  97
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 00,F
0057:  GOTO   04B
0058:  RETURN
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //#define RUN_BUTTON   PIN_B7 
....................  
....................  
....................  
.................... /*#INT_TIMER1 
.................... void timer1_isr() { 
....................    set_timer1(65036); // re-set the timer1 counter to maintain a stable period 
....................     
....................  
.................... }*/ 
....................  
.................... int counter = 0; 
....................  
.................... #INT_TIMER1 
.................... void timer1_isr(void) { 
.................... set_timer1(3036); 
*
0031:  CLRF   0E
0032:  MOVLW  0B
0033:  MOVWF  0F
0034:  MOVLW  DC
0035:  MOVWF  0E
....................  
.................... if(++counter >= 4){ 
0036:  INCF   27,F
0037:  MOVF   27,W
0038:  SUBLW  03
0039:  BTFSC  03.0
003A:  GOTO   041
....................  
....................    output_toggle(PIN_B6);//light 
003B:  BSF    03.5
003C:  BCF    06.6
003D:  MOVLW  40
003E:  BCF    03.5
003F:  XORWF  06,F
....................     
....................    //if (input(PIN_B6)) {  output_low(PIN_B6); } 
.................... //else { output_high(PIN_B6);} 
....................     
....................    counter = 0; 
0040:  CLRF   27
.................... } 
....................  
0041:  BCF    0C.0
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   01D
.................... } 
....................  
....................  
....................  
.................... void main() 
*
0059:  MOVF   03,W
005A:  ANDLW  1F
005B:  MOVWF  03
005C:  MOVLW  71
005D:  BSF    03.5
005E:  MOVWF  0F
005F:  CLRF   10
0060:  MOVF   0F,W
0061:  BSF    03.6
0062:  BCF    07.3
0063:  MOVLW  0C
0064:  BCF    03.6
0065:  MOVWF  19
0066:  MOVLW  A2
0067:  MOVWF  18
0068:  MOVLW  90
0069:  BCF    03.5
006A:  MOVWF  18
006B:  CLRF   27
006C:  BSF    03.5
006D:  BSF    03.6
006E:  MOVF   09,W
006F:  ANDLW  C0
0070:  MOVWF  09
0071:  BCF    03.6
0072:  BCF    1F.4
0073:  BCF    1F.5
0074:  MOVLW  00
0075:  BSF    03.6
0076:  MOVWF  08
0077:  BCF    03.5
0078:  CLRF   07
0079:  CLRF   08
007A:  CLRF   09
007B:  BCF    03.7
.................... { 
....................     
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
007C:  MOVLW  35
007D:  BCF    03.6
007E:  MOVWF  10
....................    set_timer1(3036); 
007F:  CLRF   0E
0080:  MOVLW  0B
0081:  MOVWF  0F
0082:  MOVLW  DC
0083:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1); 
0084:  BSF    03.5
0085:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0086:  MOVLW  C0
0087:  BCF    03.5
0088:  IORWF  0B,F
....................        
....................     
....................  
....................    while(1) { 
....................        
....................        
....................           
....................          if(!input(PIN_B7)){//switch 
0089:  BSF    03.5
008A:  BSF    06.7
008B:  BCF    03.5
008C:  BTFSC  06.7
008D:  GOTO   09C
....................           
....................             output_toggle(PIN_B6);//light 
008E:  BSF    03.5
008F:  BCF    06.6
0090:  MOVLW  40
0091:  BCF    03.5
0092:  XORWF  06,F
....................             while(!input(PIN_B7)){ 
0093:  BSF    03.5
0094:  BSF    06.7
0095:  BCF    03.5
0096:  BTFSC  06.7
0097:  GOTO   09C
....................             delay_ms(1); 
0098:  MOVLW  01
0099:  MOVWF  28
009A:  CALL   045
009B:  GOTO   093
....................             } 
....................           
....................          } 
....................        
....................          delay_ms(1); 
009C:  MOVLW  01
009D:  MOVWF  28
009E:  CALL   045
009F:  GOTO   089
....................  
....................    } 
....................  
....................  
.................... } 
00A0:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
