CCS PCM C Compiler, Version 5.074, 32906               25-Á.¤.-18 21:35

               Filename:   C:\Users\DONUT\Desktop\EMbedLab\Lab3\Lab3.1\3.1.lst

               ROM used:   309 words (4%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           24 (7%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0E2
0003:  NOP
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
*
0070:  MOVF   31,W
0071:  CLRF   78
0072:  SUBWF  30,W
0073:  BTFSC  03.0
0074:  GOTO   078
0075:  MOVF   30,W
0076:  MOVWF  77
0077:  GOTO   084
0078:  CLRF   77
0079:  MOVLW  08
007A:  MOVWF  32
007B:  RLF    30,F
007C:  RLF    77,F
007D:  MOVF   31,W
007E:  SUBWF  77,W
007F:  BTFSC  03.0
0080:  MOVWF  77
0081:  RLF    78,F
0082:  DECFSZ 32,F
0083:  GOTO   07B
0084:  RETURN
0085:  MOVLW  20
0086:  BTFSS  2B.4
0087:  MOVLW  30
0088:  MOVWF  2C
0089:  MOVF   2A,W
008A:  MOVWF  77
008B:  BTFSS  2A.7
008C:  GOTO   095
008D:  COMF   77,F
008E:  INCF   77,F
008F:  MOVF   77,W
0090:  MOVWF  2A
0091:  MOVLW  2D
0092:  MOVWF  2C
0093:  BSF    2B.7
0094:  BSF    2B.0
0095:  MOVF   2A,W
0096:  MOVWF  30
0097:  MOVLW  64
0098:  MOVWF  31
0099:  CALL   070
009A:  MOVF   77,W
009B:  MOVWF  2A
009C:  MOVLW  30
009D:  ADDWF  78,W
009E:  MOVWF  2D
009F:  MOVF   2A,W
00A0:  MOVWF  30
00A1:  MOVLW  0A
00A2:  MOVWF  31
00A3:  CALL   070
00A4:  MOVLW  30
00A5:  ADDWF  77,W
00A6:  MOVWF  2F
00A7:  MOVLW  30
00A8:  ADDWF  78,W
00A9:  MOVWF  2E
00AA:  MOVF   2C,W
00AB:  MOVWF  77
00AC:  MOVLW  30
00AD:  SUBWF  2D,W
00AE:  BTFSC  03.2
00AF:  GOTO   0B4
00B0:  BSF    2B.1
00B1:  BTFSC  2B.7
00B2:  BSF    2B.2
00B3:  GOTO   0C8
00B4:  MOVF   2C,W
00B5:  MOVWF  2D
00B6:  MOVLW  20
00B7:  MOVWF  2C
00B8:  MOVLW  30
00B9:  SUBWF  2E,W
00BA:  BTFSC  03.2
00BB:  GOTO   0C0
00BC:  BSF    2B.0
00BD:  BTFSC  2B.7
00BE:  BSF    2B.1
00BF:  GOTO   0C8
00C0:  BTFSS  03.2
00C1:  BSF    2B.0
00C2:  BTFSS  03.2
00C3:  GOTO   0C8
00C4:  MOVF   2D,W
00C5:  MOVWF  2E
00C6:  MOVLW  20
00C7:  MOVWF  2D
00C8:  BTFSC  2B.2
00C9:  GOTO   0CF
00CA:  BTFSC  2B.1
00CB:  GOTO   0D3
00CC:  BTFSC  2B.0
00CD:  GOTO   0D7
00CE:  GOTO   0DB
00CF:  MOVF   2C,W
00D0:  BTFSS  0C.4
00D1:  GOTO   0D0
00D2:  MOVWF  19
00D3:  MOVF   2D,W
00D4:  BTFSS  0C.4
00D5:  GOTO   0D4
00D6:  MOVWF  19
00D7:  MOVF   2E,W
00D8:  BTFSS  0C.4
00D9:  GOTO   0D8
00DA:  MOVWF  19
00DB:  MOVF   2F,W
00DC:  BTFSS  0C.4
00DD:  GOTO   0DC
00DE:  MOVWF  19
00DF:  BCF    0A.3
00E0:  BCF    0A.4
00E1:  GOTO   134 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOMCLR                   //Master Clear pin not enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES BROWNOUT                 //Brownout reset 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES BORV40                   //Brownout reset at 4.0V 
.................... #FUSES RESERVED                 //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
0004:  MOVLW  2B
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... // Project constants 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define REGISTER_SIZE  8       // the slave's register size. Resize to 
....................                                 // fit your needs 
....................  
....................  
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
0018:  BCF    14.7
0019:  BCF    0C.3
001A:  MOVF   2B,W
001B:  MOVWF  13
001C:  MOVLW  02
001D:  BTFSC  14.7
001E:  GOTO   026
001F:  BTFSS  0C.3
0020:  GOTO   01F
0021:  MOVLW  00
0022:  BSF    03.5
0023:  BTFSC  11.6
0024:  MOVLW  01
0025:  BCF    03.5
0026:  MOVWF  78
0027:  RETURN
*
0055:  BCF    14.6
0056:  BSF    03.5
0057:  BSF    11.3
0058:  BTFSC  11.3
0059:  GOTO   058
005A:  BTFSC  77.0
005B:  BCF    11.5
005C:  BTFSS  77.0
005D:  BSF    11.5
005E:  BSF    11.4
005F:  BTFSC  11.4
0060:  GOTO   05F
0061:  BCF    03.5
0062:  MOVF   13,W
0063:  MOVWF  78
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... // This is the main device register 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... int deviceRegister[REGISTER_SIZE]={0}; // device register 
*
0116:  BCF    03.6
0117:  CLRF   21
0118:  CLRF   22
0119:  CLRF   23
011A:  CLRF   24
011B:  CLRF   25
011C:  CLRF   26
011D:  CLRF   27
011E:  CLRF   28
....................  
....................  
.................... // Write one byte to the register address 
.................... void writeOneByteToAddress(int registerAddress, int Value) { 
....................    i2c_start(); 
*
0028:  BSF    03.5
0029:  BSF    11.0
002A:  BTFSC  11.0
002B:  GOTO   02A
....................    i2c_write(SLAVE_ADDRESS|0); 
002C:  MOVLW  B0
002D:  BCF    03.5
002E:  MOVWF  2B
002F:  CALL   018
....................    i2c_write(registerAddress);  // send the address to write 
0030:  MOVF   29,W
0031:  MOVWF  2B
0032:  CALL   018
....................    i2c_write(Value);  // write the value 
0033:  MOVF   2A,W
0034:  MOVWF  2B
0035:  CALL   018
....................    i2c_stop(); 
0036:  BSF    03.5
0037:  BSF    11.2
0038:  BTFSC  11.2
0039:  GOTO   038
003A:  BCF    03.5
003B:  BCF    0A.3
003C:  BCF    0A.4
003D:  GOTO   12B (RETURN)
.................... } 
....................  
....................  
.................... // read one byte from the register address 
.................... int ReadOneBytefromAddress(int registerAddress) { 
....................     
....................    int returnValue; 
....................     
....................    i2c_start(); 
003E:  BSF    03.5
003F:  BSF    11.0
0040:  BTFSC  11.0
0041:  GOTO   040
....................    i2c_write(SLAVE_ADDRESS|0); 
0042:  MOVLW  B0
0043:  BCF    03.5
0044:  MOVWF  2B
0045:  CALL   018
....................    i2c_write(registerAddress);  // send the address to read 
0046:  MOVF   29,W
0047:  MOVWF  2B
0048:  CALL   018
....................    i2c_start(); 
0049:  BSF    03.5
004A:  BSF    11.1
004B:  BTFSC  11.1
004C:  GOTO   04B
....................    i2c_write(SLAVE_ADDRESS|1);  // re-send slave addres with bit 0 = 1 
004D:  MOVLW  B1
004E:  BCF    03.5
004F:  MOVWF  2B
0050:  CALL   018
....................    delay_ms(1);                 // wait for the slave to process the data 
0051:  MOVLW  01
0052:  MOVWF  2B
0053:  CALL   004
....................    returnValue = i2c_read(0);   // read from the slave.  
0054:  CLRF   77
*
0064:  MOVF   78,W
0065:  MOVWF  2A
....................    i2c_stop(); 
0066:  BSF    03.5
0067:  BSF    11.2
0068:  BTFSC  11.2
0069:  GOTO   068
....................     
....................    return(returnValue); 
006A:  BCF    03.5
006B:  MOVF   2A,W
006C:  MOVWF  78
006D:  BCF    0A.3
006E:  BCF    0A.4
006F:  GOTO   12E (RETURN)
.................... } 
....................  
.................... // read N byte from the register address and store in the global array deviceRegister 
.................... // Note. the size of deviceRegister[] must be >= registerAddress + N 
.................... void ReadNBytedfromAddress(int registerAddress, int N) { 
....................     
....................    int i; 
....................     
....................    i2c_start(); 
....................    i2c_write(SLAVE_ADDRESS|0); 
....................    i2c_write(registerAddress);  // send the address to read 
....................    i2c_start(); 
....................    i2c_write(SLAVE_ADDRESS|1);  // re-send slave addres with bit 0 = 1 
....................    for (i=0;i<N-1;i++) { 
....................       delay_ms(1);                 // wait for the slave to process the data 
....................       deviceRegister[i] = i2c_read();   // read from the slave.  
....................    } 
....................    deviceRegister[i] = i2c_read(0); // the last read must use 0 as an argument 
....................    i2c_stop(); 
....................     
.................... } 
....................  
.................... void main() { 
*
00E2:  MOVF   03,W
00E3:  ANDLW  1F
00E4:  MOVWF  03
00E5:  MOVLW  71
00E6:  BSF    03.5
00E7:  MOVWF  0F
00E8:  CLRF   10
00E9:  MOVF   0F,W
00EA:  BSF    03.6
00EB:  BCF    07.3
00EC:  MOVLW  0C
00ED:  BCF    03.6
00EE:  MOVWF  19
00EF:  MOVLW  A2
00F0:  MOVWF  18
00F1:  MOVLW  90
00F2:  BCF    03.5
00F3:  MOVWF  18
00F4:  MOVLW  FF
00F5:  MOVWF  20
00F6:  BSF    20.3
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
00FA:  BCF    03.5
00FB:  BSF    20.4
00FC:  MOVF   20,W
00FD:  BSF    03.5
00FE:  MOVWF  07
00FF:  MOVLW  13
0100:  MOVWF  13
0101:  MOVLW  28
0102:  BCF    03.5
0103:  MOVWF  14
0104:  BSF    03.5
0105:  BSF    14.7
0106:  BCF    14.6
0107:  BSF    03.6
0108:  MOVF   09,W
0109:  ANDLW  C0
010A:  MOVWF  09
010B:  BCF    03.6
010C:  BCF    1F.4
010D:  BCF    1F.5
010E:  MOVLW  00
010F:  BSF    03.6
0110:  MOVWF  08
0111:  BCF    03.5
0112:  CLRF   07
0113:  CLRF   08
0114:  CLRF   09
0115:  BCF    03.7
....................    delay_ms(2000); 
*
011F:  MOVLW  08
0120:  MOVWF  29
0121:  MOVLW  FA
0122:  MOVWF  2B
0123:  CALL   004
0124:  DECFSZ 29,F
0125:  GOTO   121
....................    writeOneByteToAddress(3,1);  // write value 100 to slave at address 2 
0126:  MOVLW  03
0127:  MOVWF  29
0128:  MOVLW  01
0129:  MOVWF  2A
012A:  GOTO   028
....................    printf("%d",ReadOneBytefromAddress(3)); 
012B:  MOVLW  03
012C:  MOVWF  29
012D:  GOTO   03E
012E:  MOVF   78,W
012F:  MOVWF  29
0130:  MOVWF  2A
0131:  MOVLW  18
0132:  MOVWF  2B
0133:  GOTO   085
.................... } 
0134:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
