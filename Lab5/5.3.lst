CCS PCM C Compiler, Version 5.074, 32906               15-Feb-18 13:58

               Filename:   D:\GitHub\MicroEmbedLab\Lab5\5.3.lst

               ROM used:   209 words (3%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           19 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   062
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.0
001A:  GOTO   01D
001B:  BTFSC  0C.0
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <16F886.h> 
.................... //////////// Standard Header file for the PIC16F886 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F886 
....................  
.................... #list 
....................  
.................... #device ADC=10 *=16 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin not enabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //Brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brodddddwnout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #FUSES INTRC_IO  
....................  
.................... #use delay(clock=8M) 
*
004E:  MOVLW  2D
004F:  MOVWF  04
0050:  BCF    03.7
0051:  MOVF   00,W
0052:  BTFSC  03.2
0053:  GOTO   061
0054:  MOVLW  02
0055:  MOVWF  78
0056:  CLRF   77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  DECFSZ 78,F
005A:  GOTO   056
005B:  MOVLW  97
005C:  MOVWF  77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  DECFSZ 00,F
0060:  GOTO   054
0061:  RETURN
.................... #define SLAVE_ADDRESS  0xB0 
.................... //#define SLAVE_ADDRESS  0xD0 
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(MASTER, I2C1, FORCE_HW) // configure the i2c port 
....................  
....................  
.................... int counter=0; 
.................... int duty=0; 
.................... int y=1; 
.................... int pwd=1; 
....................  
.................... #INT_TIMER1 
.................... void timer1_isr(){ 
....................   set_timer1(65036);  
*
0031:  CLRF   0E
0032:  MOVLW  FE
0033:  MOVWF  0F
0034:  MOVLW  0C
0035:  MOVWF  0E
....................    counter++; 
0036:  INCF   28,F
....................     
....................    if (counter == 19) { counter = 0;}  
0037:  MOVF   28,W
0038:  SUBLW  13
0039:  BTFSC  03.2
003A:  CLRF   28
....................    if (counter == 0) {  
003B:  MOVF   28,F
003C:  BTFSS  03.2
003D:  GOTO   042
....................     
....................    output_high(PIN_B4);}  // beginning of a new period 
003E:  BSF    03.5
003F:  BCF    06.4
0040:  BCF    03.5
0041:  BSF    06.4
....................    if (counter == pwd) {output_low(PIN_B4);}   
0042:  MOVF   2B,W
0043:  SUBWF  28,W
0044:  BTFSS  03.2
0045:  GOTO   04A
0046:  BSF    03.5
0047:  BCF    06.4
0048:  BCF    03.5
0049:  BCF    06.4
004A:  BCF    0C.0
004B:  BCF    0A.3
004C:  BCF    0A.4
004D:  GOTO   01D
.................... } 
....................  
....................  
....................  
.................... void main() { 
*
0062:  MOVF   03,W
0063:  ANDLW  1F
0064:  MOVWF  03
0065:  MOVLW  71
0066:  BSF    03.5
0067:  MOVWF  0F
0068:  CLRF   10
0069:  MOVF   0F,W
006A:  BSF    03.6
006B:  BCF    07.3
006C:  MOVLW  0C
006D:  BCF    03.6
006E:  MOVWF  19
006F:  MOVLW  A2
0070:  MOVWF  18
0071:  MOVLW  90
0072:  BCF    03.5
0073:  MOVWF  18
0074:  MOVLW  FF
0075:  MOVWF  27
0076:  BSF    27.3
0077:  MOVF   27,W
0078:  BSF    03.5
0079:  MOVWF  07
007A:  BCF    03.5
007B:  BSF    27.4
007C:  MOVF   27,W
007D:  BSF    03.5
007E:  MOVWF  07
007F:  MOVLW  13
0080:  MOVWF  13
0081:  MOVLW  28
0082:  BCF    03.5
0083:  MOVWF  14
0084:  BSF    03.5
0085:  BSF    14.7
0086:  BCF    14.6
0087:  BCF    03.5
0088:  CLRF   28
0089:  CLRF   29
008A:  MOVLW  01
008B:  MOVWF  2A
008C:  MOVLW  01
008D:  MOVWF  2B
008E:  BSF    03.5
008F:  BSF    03.6
0090:  MOVF   09,W
0091:  ANDLW  C0
0092:  MOVWF  09
0093:  BCF    03.6
0094:  BCF    1F.4
0095:  BCF    1F.5
0096:  MOVLW  00
0097:  BSF    03.6
0098:  MOVWF  08
0099:  BCF    03.5
009A:  CLRF   07
009B:  CLRF   08
009C:  CLRF   09
009D:  BCF    03.7
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
009E:  MOVLW  35
009F:  BCF    03.6
00A0:  MOVWF  10
....................    set_timer1(65036);  
00A1:  CLRF   0E
00A2:  MOVLW  FE
00A3:  MOVWF  0F
00A4:  MOVLW  0C
00A5:  MOVWF  0E
....................    enable_interrupts(INT_TIMER1);  
00A6:  BSF    03.5
00A7:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
00A8:  MOVLW  C0
00A9:  BCF    03.5
00AA:  IORWF  0B,F
....................  
....................   //Counter = 0; 
....................   // Duty = 3; 
....................    While(1){ 
....................     
....................      if (!input(PIN_B7) && y==1) { 
00AB:  BSF    03.5
00AC:  BSF    06.7
00AD:  BCF    03.5
00AE:  BTFSC  06.7
00AF:  GOTO   0CD
00B0:  DECFSZ 2A,W
00B1:  GOTO   0CD
....................      output_high(PIN_B5); 
00B2:  BSF    03.5
00B3:  BCF    06.5
00B4:  BCF    03.5
00B5:  BSF    06.5
....................      delay_ms(1000); 
00B6:  MOVLW  04
00B7:  MOVWF  2C
00B8:  MOVLW  FA
00B9:  MOVWF  2D
00BA:  CALL   04E
00BB:  DECFSZ 2C,F
00BC:  GOTO   0B8
....................            if(pwd==1){             
00BD:  DECFSZ 2B,W
00BE:  GOTO   0C6
....................                  pwd=2; 
00BF:  MOVLW  02
00C0:  MOVWF  2B
....................                  
....................                  output_low(PIN_B5); 
00C1:  BSF    03.5
00C2:  BCF    06.5
00C3:  BCF    03.5
00C4:  BCF    06.5
....................                   
....................                   
....................            }else{  
00C5:  GOTO   0C8
....................                pwd=1; 
00C6:  MOVLW  01
00C7:  MOVWF  2B
....................                //output_high(PIN_B5);      
....................            } 
....................                y=0; 
00C8:  CLRF   2A
....................                delay_ms(200); 
00C9:  MOVLW  C8
00CA:  MOVWF  2D
00CB:  CALL   04E
....................      }else{ 
00CC:  GOTO   0CF
....................          y=1; 
00CD:  MOVLW  01
00CE:  MOVWF  2A
....................      } 
00CF:  GOTO   0AB
....................  
....................    } 
.................... } 
00D0:  SLEEP

Configuration Fuses:
   Word  1: 2FC4   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
